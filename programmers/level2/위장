문제 설명

스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.

예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.

종류  |  이름
얼굴  |  동그란 안경, 검정 선글라스
상의  |  파란색 티셔츠
하의  |  청바지
겉옷  |  긴 코드

스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항

clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.

스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.

같은 이름을 가진 의상은 존재하지 않습니다.

clothes의 모든 원소는 문자열로 이루어져 있습니다.

모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다.

스파이는 하루에 최소 한 개의 의상은 입습니다.

입출력 예
clothes                                                                                     | return
[["yellow_hat", "headgear"],["blue_sunglasses", "eyewear"],["green_turban", "headgear"]];   | 5
[["crow_mask", "face"],["blue_sunglasses", "face"],["smoky_makeup", "face"]];               | 3

입출력 예 설명

예제 #1

headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.

예제 #2

face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.
  
-----------------------------------------------------------------------------------------------  
  
//내가 작성한코드
//알고리즘 : (중복된개수 + 1) * (중복 되지 않은 개수 + 1) -1
// headgear 2개 -> 2+1 = 3
// eyewear 1개 -> 1+1 = 2
// headgear * eyewear -1 = 3*2-1 = 5

import java.util.HashMap;
import java.util.Map;

public class 위장 {
	public int solution(String[][] clothes) {
        int answer = 1;
        Map<String, Integer> save = new HashMap<>();
        for (int i = 0; i < clothes.length; i++) {
        	String key = clothes[i][1];     
        	if(save.get(key) == null) {
        		save.put(key, 1);
            	System.out.println("save.get(key) : " + save.get(key));

        	}else {
        		save.put(key, save.get(key)+1);
            	System.out.println("save.get(key) : " + save.get(key));

        	}   	
     
		}
        
        for(String value : save.keySet()) {
        	answer = answer * (save.get(value) + 1);
        	System.out.println("answer : " + answer);

        }
        
        return answer-1;
    }
	public static void main(String[] args) {
		위장 we = new 위장();
		String [][] clothes = {{"yellow_hat", "headgear"},{"blue_sunglasses", "eyewear"},{"green_turban", "headgear"}}; 
		String [][] clothes1 = {{"crow_mask", "face"},{"blue_sunglasses", "face"},{"smoky_makeup", "face"}}; 
		System.out.println("we.solution(clothes) : " + we.solution(clothes));

	}

}
​

​

//다른사람코드 1
import java.util.HashMap;
import java.util.Iterator;
class Solution {
    public int solution(String[][] clothes) {
        int answer = 1;
        HashMap<String, Integer> map = new HashMap<>();
        for(int i=0; i<clothes.length; i++){
            String key = clothes[i][1];
            if(!map.containsKey(key)) {
                map.put(key, 1);
            } else {
                map.put(key, map.get(key) + 1);
            }
        }
        Iterator<Integer> it = map.values().iterator();
        while(it.hasNext()) {
            answer *= it.next().intValue()+1;
        }
        return answer-1;
    }
}  

//다른사람코드 2
import java.util.*;
import static java.util.stream.Collectors.*;

class Solution {
    public int solution(String[][] clothes) {
        return Arrays.stream(clothes)
                .collect(groupingBy(p -> p[1], mapping(p -> p[0], counting())))
                .values()
                .stream()
                .collect(reducing(1L, (x, y) -> x * (y + 1))).intValue() - 1;
    }
}

